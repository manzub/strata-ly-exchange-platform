{"remainingRequest":"/Users/mac/Sites/VUE/exchangeapp-version-control/v3/node_modules/thread-loader/dist/cjs.js!/Users/mac/Sites/VUE/exchangeapp-version-control/v3/node_modules/babel-loader/lib/index.js!/Users/mac/Sites/VUE/exchangeapp-version-control/v3/src/api/index.js","dependencies":[{"path":"/Users/mac/Sites/VUE/exchangeapp-version-control/v3/src/api/index.js","mtime":1627507285026},{"path":"/Users/mac/Sites/VUE/exchangeapp-version-control/v3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Sites/VUE/exchangeapp-version-control/v3/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Sites/VUE/exchangeapp-version-control/v3/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/mac/Sites/VUE/exchangeapp-version-control/v3/src/api/index.js"],"names":["require","axios","default","QueryString","coinbase","Client","cb_client","apiKey","apiSecret","SCRIPT_BTC","API_KEY","SCRIPT_STRLY","FLW_SEC_KEY","ROOT_URL","STRATALY","BLOCKCHAIN","APP_SERVER","REMITCABLE","module","exports","login","data","post","register","convertRate","coin","api","amount","str2","value","converted","parseFloat","toFixed","name","Number","getUserDetails","param","token","window","localStorage","getItem","get","headers","Authorization","response","status","id","getUserBalances","wallet","console","log","convertStrataToUsd","convertUsdToStrata","getRates","setItem","JSON","stringify","getChartData","getWallet","address","getGasFee","getPaymentSettings","user","query","setPaymentSettings","settings","obj","walletAddress","email","option","sendTransaction","recipient","sender","recieve","topCoins","fetchAllCoins","allCoins","coindata","base","long","img","coindata1","parse","current_value","push","coinBalance","auth","res","balance","result","usdBalance","validateExchangeAddress","isValid","sendBtc","receiver","swapCoins","from_coin","exchange_coin","exchange_amount","url","getBtcUserLogs","tr_arr","transactions","forEach","tr","outputs","find","out","str","from","inputs","to"],"mappings":"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","sourcesContent":["const { default: axios } = require(\"axios\");\nconst QueryString = require(\"qs\");\nconst coinbase = require('coinbase').Client;\nconst cb_client = new coinbase({\n    apiKey:'W7Aw5mblAyDzOiYB',\n    apiSecret:'gGJ956n4USRlMGEMharQI8hNTMcIKBha'\n})\n\nconst SCRIPT_BTC = '2Mt3znbVWtZTEV5S6DAfgxadb9ZWoV2WsYu';\nconst API_KEY = \"0x5883e0d5f3ed1e2ad14014884f230632f48d5871\";\nconst SCRIPT_STRLY = \"1b02af2c11d0c769589fc6cf76e309f7da1d2f08abff09a3ea767d1407ce43df\";\nconst FLW_SEC_KEY = \"FLWSECK-8ea67fd7d97a1cfb6b7f4ab0fb35d0d9-X\";\nconst ROOT_URL = {\n    STRATALY:'https://accounts.strata.ly/api',\n    BLOCKCHAIN:'http://157.245.4.9/api',\n    APP_SERVER:'http://64.227.4.126',\n    REMITCABLE:'https://secure.remitcable.com/api'\n}\n\nmodule.exports = {\n    login(data) {\n        return axios.post(`${ROOT_URL.REMITCABLE}/login`, data)\n    },\n    register(data) {\n        return axios.post(`${ROOT_URL.REMITCABLE}/register`, data)\n    },\n    convertRate(coin, api=false, amount=1) {\n        var str2 = amount/coin.value\n        let converted = `${parseFloat(str2).toFixed(7)}`;\n        return !api ? `${converted}${coin.name}` : Number(converted)\n    },\n    async getUserDetails(param) {\n        const token = param || window.localStorage.getItem('token');\n        const response = await axios.get(`${ROOT_URL.REMITCABLE}/user`, { \n            headers: { Authorization: `Bearer ${token}` }\n        })\n        // console.log(response.data);\n        const status = response.data.id\n        if (status && status > 0) return response.data;\n        else return false;\n    },\n    async getUserBalances(wallet) {\n        const response = await axios.get(`${ROOT_URL.REMITCABLE}/whome/${wallet}`)\n        console.log(response.data);\n        return response.data;\n    },\n    async convertStrataToUsd(amount) {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/convert/STRLY/${amount}`);\n        return response.data.data;\n    },\n    async convertUsdToStrata(amount) {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/convert/USD/${amount}`);\n        return response.data.data;\n    },\n    async getRates() {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/value`);\n        window.localStorage.setItem('rates', JSON.stringify(response.data.data))\n        return response.data.data\n    },\n    async getChartData() {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/last_value_chart`);\n        window.localStorage.setItem('chart_data', JSON.stringify(response.data.data))\n        return response.data.data\n    },\n    async getWallet(address) {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/wallet/details/${address}`)\n        return response.data.data;\n    },\n    async getGasFee(amount) {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/fees/${amount}`)\n        return response.data.data;\n    },\n    async getPaymentSettings(user) {\n        var query = QueryString.stringify(user)\n        return await axios.get(`${ROOT_URL.APP_SERVER}/user-info?${query}`)\n    },\n    async setPaymentSettings(user, settings) {\n        var obj = { wallet:user.walletAddress, email:user.email, option:settings.option, address:settings.address }\n        var query = QueryString.stringify(obj)\n        return await axios.get(`${ROOT_URL.APP_SERVER}/set-option?${query}`)\n    },\n    async sendTransaction(data) {\n        const { recipient, amount, sender } = data;\n        const recieve = recipient ? recipient : SCRIPT_STRLY;\n        const response = await axios.get(`${ROOT_URL.STRATALY}/transfer/${API_KEY}/${sender}/${recieve}/${amount}`)\n        return response.data;\n    },\n    topCoins: ['ETH','BTC','LTC','BCH'],\n    async fetchAllCoins() {\n        this.getRates();\n        var allCoins = []\n        const response = await axios.get(`https://api.coinbase.com/v2/prices/BTC-USD/spot`)\n\n        let { data } = response.data;\n        let coindata = { name:data.base, value:data.amount,long:'BITCOIN',img:'assets/img/logo-btc.png' }\n        let coindata1 = { name:'STRLY', value:JSON.parse(localStorage.getItem('rates')).current_value,long:'STRATALY',img:'assets/img/logo-icon.png' }\n        allCoins.push(coindata)\n        allCoins.push(coindata1)\n        return allCoins;\n        return [{name:'BTC',value:32800,img:'assets/img/logo-icon.png',long:'BITCOIN'}]\n    },\n    async coinBalance(coin, auth) {\n        switch (coin) {\n            case 'BTC':\n                const response = await axios.get(`${ROOT_URL.REMITCABLE}/btc/get/balance/${auth.id}`);\n                return response.data;\n            case 'STRLY':\n                const res = await this.getWallet(auth.walletAddress);\n                let result = await this.convertStrataToUsd(res.balance)\n                let obj = {...res,usdBalance:result}\n                return obj\n        }\n    },\n    async validateExchangeAddress(user, coin, address) {\n        switch (coin) {\n            case 'BTC':\n                // const response = await axios.get(`http://api.smartbit.com.au/v1/blockchain/address/${address}`)\n                const response = await axios.get(`${ROOT_URL.REMITCABLE}/btc/verify/address/${user.id}/${address}`)\n                return response.data.isValid\n            case 'STRLY':\n                const res = await this.getWallet(address);\n                return res.address ? true : false;\n        }\n    },\n    async sendBtc(user, amount, receiver=SCRIPT_BTC) {\n        const response = await axios.get(`${ROOT_URL.REMITCABLE}/btc/send/${user.id}/${amount}/${receiver}`)\n        return response.data;\n    },\n    async swapCoins(user, from_coin, exchange_coin, amount, exchange_amount) {\n        const url = `${ROOT_URL.REMITCABLE}/exchange/${from_coin}/${exchange_coin}/${user.id}/${amount}/${exchange_amount}`\n        const response = await axios.get(url)\n        return response.data;\n    },\n    async getBtcUserLogs(user) {\n        const response = await axios.get(`${ROOT_URL.REMITCABLE}/btc/transactions/${user.id}`)\n        let tr_arr = [];\n        let address = response.data[0];\n        let { transactions } = response.data[1];\n        transactions.forEach(tr => {\n            // console.log(tr.outputs.filter(out => out.address == address))\n            var outputs = tr.outputs.find(out => out.address == address);\n            // console.log(outputs);\n            var str = outputs ? outputs.address : tr.outputs[0].address\n\n            let obj = { value:(tr.outputs[0].value/100000000),from:tr.inputs[0].address,to:str }\n            tr_arr.push(obj)\n        })\n        return tr_arr;\n    }\n}"]}]}