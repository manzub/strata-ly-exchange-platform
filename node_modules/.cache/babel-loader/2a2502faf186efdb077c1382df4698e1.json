{"remainingRequest":"/Users/mac/Sites/VUE/exchangeapp-version-control/v2/node_modules/thread-loader/dist/cjs.js!/Users/mac/Sites/VUE/exchangeapp-version-control/v2/node_modules/babel-loader/lib/index.js!/Users/mac/Sites/VUE/exchangeapp-version-control/v2/src/api/index.js","dependencies":[{"path":"/Users/mac/Sites/VUE/exchangeapp-version-control/v2/src/api/index.js","mtime":1625174814398},{"path":"/Users/mac/Sites/VUE/exchangeapp-version-control/v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Sites/VUE/exchangeapp-version-control/v2/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Sites/VUE/exchangeapp-version-control/v2/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/mac/Sites/VUE/exchangeapp-version-control/v2/src/api/index.js"],"names":["require","axios","default","QueryString","coinbase","Client","cb_client","apiKey","apiSecret","SCRIPT_BTC","API_KEY","SCRIPT_STRLY","FLW_SEC_KEY","ROOT_URL","STRATALY","BLOCKCHAIN","APP_SERVER","REMITCABLE","module","exports","login","data","post","register","convertRate","coin","api","amount","str2","value","converted","parseFloat","toFixed","name","Number","getUserDetails","param","token","window","localStorage","getItem","get","headers","Authorization","response","status","id","getUserBalances","wallet","convertStrataToUsd","convertUsdToStrata","getRates","setItem","JSON","stringify","getChartData","getWallet","address","getGasFee","getPaymentSettings","user","query","setPaymentSettings","settings","obj","walletAddress","email","option","sendTransaction","recipient","sender","recieve","console","log","topCoins","fetchAllCoins","allCoins","coindata","base","coindata1","parse","current_value","push","coinBalance","auth","res","balance","result","usdBalance","validateExchangeAddress","success","sendBtc","receiver","swapCoins","from_coin","exchange_coin","exchange_amount","url","getBtcUserLogs","tr_arr","transactions","forEach","tr","inputs","from","to","outputs"],"mappings":"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","sourcesContent":["const { default: axios } = require(\"axios\");\nconst QueryString = require(\"qs\");\nconst coinbase = require('coinbase').Client;\nconst cb_client = new coinbase({\n    apiKey:'W7Aw5mblAyDzOiYB',\n    apiSecret:'gGJ956n4USRlMGEMharQI8hNTMcIKBha'\n})\n\nconst SCRIPT_BTC = '2Mt3znbVWtZTEV5S6DAfgxadb9ZWoV2WsYu';\nconst API_KEY = \"0x5883e0d5f3ed1e2ad14014884f230632f48d5871\";\nconst SCRIPT_STRLY = \"1b02af2c11d0c769589fc6cf76e309f7da1d2f08abff09a3ea767d1407ce43df\";\nconst FLW_SEC_KEY = \"FLWSECK-8ea67fd7d97a1cfb6b7f4ab0fb35d0d9-X\";\nconst ROOT_URL = {\n    STRATALY:'https://accounts.strata.ly/api',\n    BLOCKCHAIN:'http://157.245.4.9/api',\n    APP_SERVER:'http://64.227.4.126',\n    REMITCABLE:'https://secure.remitcable.com/api'\n}\n\nmodule.exports = {\n    login(data) {\n        return axios.post(`${ROOT_URL.STRATALY}/login`, data)\n    },\n    register(data) {\n        return axios.post(`${ROOT_URL.STRATALY}/register`, data)\n    },\n    convertRate(coin, api=false, amount=1) {\n        var str2 = amount/coin.value\n        let converted = `${parseFloat(str2).toFixed(7)}`;\n        return !api ? `${converted}${coin.name}` : Number(converted)\n    },\n    async getUserDetails(param) {\n        const token = param || window.localStorage.getItem('token');\n        const response = await axios.get(`${ROOT_URL.STRATALY}/user`, { \n            headers: { Authorization: `Bearer ${token}` }\n        })\n        const status = response.data.id\n        if (status && status > 0) return response.data;\n        else return false;\n    },\n    async getUserBalances(wallet) {\n        const response = await axios.get(`${ROOT_URL.APP_SERVER}/home/${wallet}`)\n        return response.data;\n    },\n    async convertStrataToUsd(amount) {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/convert/STRLY/${amount}`);\n        return response.data.data;\n    },\n    async convertUsdToStrata(amount) {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/convert/USD/${amount}`);\n        return response.data.data;\n    },\n    async getRates() {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/value`);\n        window.localStorage.setItem('rates', JSON.stringify(response.data.data))\n        return response.data.data\n    },\n    async getChartData() {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/last_value_chart`);\n        window.localStorage.setItem('chart_data', JSON.stringify(response.data.data))\n        return response.data.data\n    },\n    async getWallet(address) {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/wallet/details/${address}`)\n        return response.data.data;\n    },\n    async getGasFee(amount) {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/fees/${amount}`)\n        return response.data.data;\n    },\n    async getPaymentSettings(user) {\n        var query = QueryString.stringify(user)\n        return await axios.get(`${ROOT_URL.APP_SERVER}/user-info?${query}`)\n    },\n    async setPaymentSettings(user, settings) {\n        var obj = { wallet:user.walletAddress, email:user.email, option:settings.option, address:settings.address }\n        var query = QueryString.stringify(obj)\n        return await axios.get(`${ROOT_URL.APP_SERVER}/set-option?${query}`)\n    },\n    async sendTransaction(data) {\n        const { recipient, amount, sender } = data;\n        const recieve = recipient ? recipient : SCRIPT_STRLY;\n        console.log(recieve);\n        const response = await axios.get(`${ROOT_URL.STRATALY}/transfer/${API_KEY}/${sender}/${recieve}/${amount}`)\n        return response.data;\n    },\n    topCoins: ['ETH','BTC','LTC','BCH'],\n    async fetchAllCoins() {\n        this.getRates();\n        var allCoins = []\n        const response = await axios.get(`https://api.coinbase.com/v2/prices/BTC-USD/spot`)\n\n        let { data } = response.data;\n        let coindata = { name:data.base, value:data.amount }\n        let coindata1 = { name:'STRLY', value:JSON.parse(localStorage.getItem('rates')).current_value }\n        allCoins.push(coindata)\n        allCoins.push(coindata1)\n        return allCoins;\n        return [{name:'BTC',value:32800}]\n    },\n    async coinBalance(coin, auth) {\n        switch (coin) {\n            case 'BTC':\n                const response = await axios.get(`${ROOT_URL.REMITCABLE}/btc/get/balance/${auth.id}`);\n                return response.data;\n            case 'STRLY':\n                const res = await this.getWallet(auth.walletAddress);\n                let result = await this.convertStrataToUsd(res.balance)\n                let obj = {...res,usdBalance:result}\n                return obj\n        }\n    },\n    async validateExchangeAddress(coin, address) {\n        switch (coin) {\n            case 'BTC':\n                const response = await axios.get(`http://api.smartbit.com.au/v1/blockchain/address/${address}`)\n                return response.data.success\n            case 'STRLY':\n                const res = await this.getWallet(address);\n                return res.address ? true : false;\n        }\n    },\n    async sendBtc(user, amount, receiver=SCRIPT_BTC) {\n        const response = await axios.get(`${ROOT_URL.REMITCABLE}/btc/send/${user.id}/${amount}/${receiver}`)\n        return response.data;\n    },\n    async swapCoins(user, from_coin, exchange_coin, amount, exchange_amount) {\n        const url = `${ROOT_URL.REMITCABLE}/exchange/${from_coin}/${exchange_coin}/${user.id}/${amount}/${exchange_amount}`\n        const response = await axios.get(url)\n        return response.data;\n    },\n    async getBtcUserLogs(user) {\n        const response = await axios.get(`${ROOT_URL.REMITCABLE}/btc/transactions/${user.id}`)\n        let tr_arr = [];\n        let { transactions } = response.data;\n        transactions.forEach(tr => {\n            let obj = { value:(tr.inputs[0].value/100000000),from:tr.inputs[0].address,to:tr.outputs[1].address }\n            tr_arr.push(obj)\n        })\n        return tr_arr;\n    }\n}"]}]}