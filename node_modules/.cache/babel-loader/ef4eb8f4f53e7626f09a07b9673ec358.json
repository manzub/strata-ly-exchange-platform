{"remainingRequest":"/Users/mac/Sites/VUE/exchangeapp-version-control/v1/node_modules/babel-loader/lib/index.js!/Users/mac/Sites/VUE/exchangeapp-version-control/v1/src/api/index.js","dependencies":[{"path":"/Users/mac/Sites/VUE/exchangeapp-version-control/v1/src/api/index.js","mtime":1622744490902},{"path":"/Users/mac/Sites/VUE/exchangeapp-version-control/v1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Sites/VUE/exchangeapp-version-control/v1/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/mac/Sites/VUE/exchangeapp-version-control/v1/src/api/index.js"],"names":["require","axios","default","QueryString","coinbase","Client","cb_client","apiKey","apiSecret","API_KEY","API_ACCOUNT","API_KEY_ADDR","ROOT_URL","STRATALY","BLOCKCHAIN","APP_SERVER","module","exports","login","data","post","register","convertRate","coin","api","amount","str2","value","converted","parseFloat","toFixed","name","Number","getUserDetails","param","token","window","localStorage","getItem","get","headers","Authorization","response","status","id","getUserBalances","wallet","convertStrataToUsd","convertUsdToStrata","getRates","setItem","JSON","stringify","getChartData","getWallet","address","getGasFee","getPaymentSettings","user","email","setPaymentSettings","settings","obj","walletAddress","option","query","sendTransaction","recipient","sender","recieve","console","log","verifyFlutterTrnx","request","req_response","tx_ref","then","topCoins","fetchAllCoins","allCoins","forEach","coindata","base","push","validateExchangeAddress","success","validateExchageActionAddress","coinId","indexOf","conductExchange","result","self","strly_data","getAccount","err","account","opts","to","exchange_address","exchage_amount","currency","sendMoney","tx"],"mappings":"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","sourcesContent":["const { default: axios } = require(\"axios\");\nconst QueryString = require(\"qs\");\nconst coinbase = require('coinbase').Client;\nconst cb_client = new coinbase({\n    apiKey:'W7Aw5mblAyDzOiYB',\n    apiSecret:'gGJ956n4USRlMGEMharQI8hNTMcIKBha'\n})\n\nconst API_KEY = \"0x5883e0d5f3ed1e2ad14014884f230632f48d5871\";\nconst API_ACCOUNT = \"1b02af2c11d0c769589fc6cf76e309f7da1d2f08abff09a3ea767d1407ce43df\";\nconst API_KEY_ADDR = \"1b02af2c11d0c769589fc6cf76e309f7da1d2f08abff09a3ea767d1407ce43df\";\nconst ROOT_URL = {\n    STRATALY:'https://accounts.strata.ly/api',\n    BLOCKCHAIN:'http://157.245.4.9/api',\n    APP_SERVER:'http://64.227.4.126'\n}\n\nmodule.exports = {\n    login(data) {\n        return axios.post(`${ROOT_URL.STRATALY}/login`, data)\n    },\n    register(data) {\n        return axios.post(`${ROOT_URL.STRATALY}/register`, data)\n    },\n    convertRate(coin, api=false, amount=1) {\n        var str2 = amount/coin.value\n        let converted = `${parseFloat(str2).toFixed(7)}`;\n        return !api ? `${converted}${coin.name}` : Number(converted)\n    },\n    async getUserDetails(param) {\n        const token = param || window.localStorage.getItem('token');\n        const response = await axios.get(`${ROOT_URL.STRATALY}/user`, { \n            headers: { Authorization: `Bearer ${token}` }\n        })\n        const status = response.data.id\n        if (status && status > 0) return response.data;\n        else return false;\n    },\n    async getUserBalances(wallet) {\n        const response = await axios.get(`${ROOT_URL.APP_SERVER}/home/${wallet}`)\n        return response.data;\n    },\n    async convertStrataToUsd(amount) {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/convert/STRLY/${amount}`);\n        return response.data.data;\n    },\n    async convertUsdToStrata(amount) {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/convert/USD/${amount}`);\n        return response.data.data;\n    },\n    async getRates() {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/value`);\n        window.localStorage.setItem('rates', JSON.stringify(response.data.data))\n        return response.data.data\n    },\n    async getChartData() {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/last_value_chart`);\n        window.localStorage.setItem('chart_data', JSON.stringify(response.data.data))\n        return response.data.data\n    },\n    async getWallet(address) {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/wallet/details/${address}`)\n        return response.data.data;\n    },\n    async getGasFee(amount) {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/fees/${amount}`)\n        return response.data.data;\n    },\n    async getPaymentSettings(user) {\n        return await axios.get(`${ROOT_URL.APP_SERVER}/user-info?wallet=${user.wallet}&email=${user.email}`)\n    },\n    async setPaymentSettings(user, settings) {\n        var obj = {\n            wallet:user.walletAddress,\n            email:user.email,\n            option:settings.option,\n            address:settings.address\n        }\n        var query = QueryString.stringify(obj)\n        return await axios.get(`${ROOT_URL.APP_SERVER}/set-option?${query}`)\n    },\n    async sendTransaction(data) {\n        const { recipient, amount, sender } = data;\n        const recieve = recipient ? recipient : API_ACCOUNT;\n        console.log(recieve);\n        const response = await axios.get(`${ROOT_URL.STRATALY}/transfer/${API_KEY}/${sender}/${recieve}/${amount}`)\n        return response.data;\n    },\n    async verifyFlutterTrnx(response, request) {\n        // const req_response = await axios.get(`http://api.flutterwave.com/v3/transactions/${response.transaction_id}/verify`,{\n        //     headers: {\n        //         'Content-Type':'application/json',\n        //         'Authorization':'Bearer FLWSECK-8ea67fd7d97a1cfb6b7f4ab0fb35d0d9-X'\n        //     }\n        // })\n        console.log(req_response);\n        if(response && response.amount == request.amount) {\n            if(response.status == \"successful\") {\n                if(response.tx_ref == request.tx_ref) {\n                    const { recipient } = request\n                    this.convertUsdToStrata(request.amount).then(amount => {\n                        this.sendTransaction({ recipient, amount:Number(amount), sender:API_KEY_ADDR })\n                    })\n                    return 1\n                }else return 0\n            }else return 0\n        }else return 0;\n    },\n    topCoins: ['ETH','BTC','LTC','BCH'],\n    async fetchAllCoins() {\n        var allCoins = []\n        this.topCoins.forEach(coin => {\n            axios.get(`http://api.coinbase.com/v2/prices/${coin}-USD/spot`)\n            .then(response => {\n                let { data } = response.data;\n                let coindata = { name:data.base, value:data.amount }\n                allCoins.push(coindata)\n            })\n        })\n        return allCoins;\n    },\n    async validateExchangeAddress(coin, address) {\n        switch (coin) {\n            case 'BTC':\n                const response = await axios.get(`http://api.smartbit.com.au/v1/blockchain/address/${address}`)\n                return response.data.success\n            case 'ETH':\n                break;\n            case 'LTC':\n                break;\n            case 'BCH':\n                break;\n        }\n    },\n    async validateExchageActionAddress(address, coin) {\n        var coinId = this.topCoins.indexOf(coin);\n        if(coinId != -1) {\n            const response = this.validateExchangeAddress(coin, address)\n            return response;\n        }else return false\n    },\n    async conductExchange(coinId, data) {\n        var result = 0;\n        var coin = this.topCoins[coinId];\n        var self = this;\n        // send strata to api account\n        await this.sendTransaction({ ...data.strly_data, recipient:API_ACCOUNT })\n        .then(response => {\n            if(response.status == 1) {\n                // send btc to user \n                cb_client.getAccount('primary', function(err, account){\n                    var opts = { to:data.exchange_address, amount:self.convertRate(coin, true, data.exchage_amount), currency:coin.name }\n                    account.sendMoney(opts, function(err, tx) {\n                        var response = tx;\n                        if(tx && tx.status == 'pending') {\n                            result = 1;\n                        }\n                    })\n                })\n            }\n        })\n        return result;\n    } \n}"]}]}