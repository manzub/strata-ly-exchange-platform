{"remainingRequest":"/Users/mac/Sites/VUE/exchangeapp-version-control/v1/node_modules/babel-loader/lib/index.js!/Users/mac/Sites/VUE/exchangeapp-version-control/v1/src/api/index.js","dependencies":[{"path":"/Users/mac/Sites/VUE/exchangeapp-version-control/v1/src/api/index.js","mtime":1622634223658},{"path":"/Users/mac/Sites/VUE/exchangeapp-version-control/v1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Sites/VUE/exchangeapp-version-control/v1/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/mac/Sites/VUE/exchangeapp-version-control/v1/src/api/index.js"],"names":["require","axios","default","QueryString","coinbase","Client","cb_client","apiKey","apiSecret","API_KEY","API_KEY_ADDR","ROOT_URL","STRATALY","BLOCKCHAIN","APP_SERVER","module","exports","login","data","post","register","convertRate","coin","str2","value","parseFloat","toFixed","name","getUserDetails","param","token","window","localStorage","getItem","get","headers","Authorization","response","status","id","getUserBalances","wallet","convertStrataToUsd","amount","convertUsdToStrata","getRates","setItem","JSON","stringify","getChartData","getWallet","address","getGasFee","getPaymentSettings","user","email","setPaymentSettings","settings","obj","walletAddress","option","query","sendTransaction","recipient","sender","verifyFlutterTrnx","request","console","log","req_response","tx_ref","then","Number","topCoins","fetchAllCoins","allCoins","forEach","coindata","base","push","validateBtcAddress","success","conductExchange","coinId","self","getAccount","err","account","opts","to","exchange_address","currency","sendMoney","tx"],"mappings":"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","sourcesContent":["const { default: axios } = require(\"axios\");\nconst QueryString = require(\"qs\");\nconst coinbase = require('coinbase').Client;\nconst cb_client = new coinbase({\n    apiKey:'W7Aw5mblAyDzOiYB',\n    apiSecret:'gGJ956n4USRlMGEMharQI8hNTMcIKBha'\n})\n\nconst API_KEY = \"0x5883e0d5f3ed1e2ad14014884f230632f48d5871\";\nconst API_KEY_ADDR = \"1b02af2c11d0c769589fc6cf76e309f7da1d2f08abff09a3ea767d1407ce43df\";\nconst ROOT_URL = {\n    STRATALY:'https://accounts.strata.ly/api',\n    BLOCKCHAIN:'http://157.245.4.9/api',\n    APP_SERVER:'http://64.227.4.126'\n}\n\nmodule.exports = {\n    login(data) {\n        return axios.post(`${ROOT_URL.STRATALY}/login`, data)\n    },\n    register(data) {\n        return axios.post(`${ROOT_URL.STRATALY}/register`, data)\n    },\n    convertRate(coin) {\n        var str2 = 1/coin.value\n        return `${parseFloat(str2).toFixed(7)}${coin.name}`\n    },\n    async getUserDetails(param) {\n        const token = param || window.localStorage.getItem('token');\n        const response = await axios.get(`${ROOT_URL.STRATALY}/user`, { \n            headers: { Authorization: `Bearer ${token}` }\n        })\n        const status = response.data.id\n        if (status && status > 0) return response.data;\n        else return false;\n    },\n    async getUserBalances(wallet) {\n        const response = await axios.get(`${ROOT_URL.APP_SERVER}/home/${wallet}`)\n        return response.data;\n    },\n    async convertStrataToUsd(amount) {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/convert/STRLY/${amount}`);\n        return response.data.data;\n    },\n    async convertUsdToStrata(amount) {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/convert/USD/${amount}`);\n        return response.data.data;\n    },\n    async getRates() {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/value`);\n        window.localStorage.setItem('rates', JSON.stringify(response.data.data))\n        return response.data.data\n    },\n    async getChartData() {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/last_value_chart`);\n        window.localStorage.setItem('chart_data', JSON.stringify(response.data.data))\n        return response.data.data\n    },\n    async getWallet(address) {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/wallet/details/${address}`)\n        return response.data.data;\n    },\n    async getGasFee(amount) {\n        const response = await axios.get(`${ROOT_URL.STRATALY}/fees/${amount}`)\n        return response.data.data;\n    },\n    async getPaymentSettings(user) {\n        return await axios.get(`${ROOT_URL.APP_SERVER}/user-info?wallet=${user.wallet}&email=${user.email}`)\n    },\n    async setPaymentSettings(user, settings) {\n        var obj = {\n            wallet:user.walletAddress,\n            email:user.email,\n            option:settings.option,\n            address:settings.address\n        }\n        var query = QueryString.stringify(obj)\n        return await axios.get(`${ROOT_URL.APP_SERVER}/set-option?${query}`)\n    },\n    async sendTransaction(data) {\n        const { recipient, amount, sender } = data;\n        const response = await axios.get(`${ROOT_URL.STRATALY}/transfer/${API_KEY}/${sender}/${recipient}/${amount}`)\n        return response.data;\n    },\n    async verifyFlutterTrnx(response, request) {\n        // const req_response = await axios.get(`http://api.flutterwave.com/v3/transactions/${response.transaction_id}/verify`,{\n        //     headers: {\n        //         'Content-Type':'application/json',\n        //         'Authorization':'Bearer FLWSECK-8ea67fd7d97a1cfb6b7f4ab0fb35d0d9-X'\n        //     }\n        // })\n        console.log(req_response);\n        if(response && response.amount == request.amount) {\n            if(response.status == \"successful\") {\n                if(response.tx_ref == request.tx_ref) {\n                    const { recipient } = request\n                    this.convertUsdToStrata(request.amount).then(amount => {\n                        this.sendTransaction({ recipient, amount:Number(amount), sender:API_KEY_ADDR })\n                    })\n                    return 1\n                }else return 0\n            }else return 0\n        }else return 0;\n    },\n    topCoins: ['ETH','BTC','LTC'],\n    async fetchAllCoins() {\n        var allCoins = []\n        this.topCoins.forEach(coin => {\n            axios.get(`http://api.coinbase.com/v2/prices/${coin}-USD/spot`)\n            .then(response => {\n                let { data } = response.data;\n                let coindata = { name:data.base, value:data.amount }\n                allCoins.push(coindata)\n            })\n        })\n        return allCoins;\n    },\n    async validateBtcAddress(address) {\n        const response = await axios.get(`http://api.smartbit.com.au/v1/blockchain/address/${address}`)\n        return response.data.success\n    },\n    async conductExchange(coinId, data) {\n        var coin = this.topCoins[coinId];\n        var self = this;\n        // send strata to api account\n        this.sendTransaction({ ...data, recipient:'api_account' })\n        .then(response => {\n            if(response.status == 1) {\n                // send btc to user \n                cb_client.getAccount('primary', function(err, account){\n                    var opts = { to:data.exchange_address, amount:self.convertRate(coin), currency:coin.name }\n                    account.sendMoney(opts, function(err, tx) {\n                        console.log(err);\n                        console.log(tx);\n                    })\n                })\n            }\n        })\n    } \n}"]}]}